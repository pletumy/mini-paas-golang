version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: minipaas-postgres
    environment:
      POSTGRES_DB: minipaas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - minipaas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: minipaas-backend
    environment:
      - GIN_MODE=debug
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
      - DATABASE_DBNAME=minipaas
      - DATABASE_SSLMODE=disable
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24
      - KUBERNETES_NAMESPACE=default
      - DOCKER_REGISTRY_URL=docker.io
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - minipaas-network
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: minipaas-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - minipaas-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: minipaas-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - minipaas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Minikube (for local Kubernetes)
  # Note: This is optional and requires minikube to be installed locally
  # minikube:
  #   image: minikube/kicbase:v0.0.40
  #   container_name: minipaas-minikube
  #   privileged: true
  #   ports:
  #     - "8443:8443"
  #   networks:
  #     - minipaas-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  minipaas-network:
    driver: bridge 